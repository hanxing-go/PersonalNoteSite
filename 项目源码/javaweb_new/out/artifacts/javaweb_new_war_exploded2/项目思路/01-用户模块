用户模块
    通过用户行为来区分       actionName
        1.用户登录         login
        2.用户注册         register
        3.进入个人中心      center
        4.加载头像         userhead
        5.验证昵称的唯一性   checkname
        6.修改用户信息（其中包括修改昵称，修改头像，修改密码等等）  updateuser

    在UserServlet的service方法中，通过actionName来区分用户的行为，然后调用对应的方法
        1.获取用户行为
            String actionName = request.getParameter("actionName");
        2.判断用户行为，并且调用对应的方法
            if("login".equals(actionName)){
                login(request,response);
            }else if("register".equals(actionName)){
                register(request,response);
            }else if("center".equals(actionName)){
                center(request,response);
            }else if("userhead".equals(actionName)){
                userhead(request,response);
            }else if("checkname".equals(actionName)){
                checkname(request,response);
            }else if("updateuser".equals(actionName)){
                updateuser(request,response);
            }
        3.在对应的方法中，完成对应的业务逻辑

一、用户登录
    ===============================前端实现==================================
        1.添加表单，设置表单属性
             action="User" method="post" id="loginForm"
        2.添加表单元素的name属性值
            name="username" name="password"
        3.在js中，通过id获取表单元素，然后添加表单元素的onblur事件
            1.获取表单元素的值
            2.判断表单元素的值是否为空
            3.如果为空，提示用户
            4.如果不为空，提交表单


    ===============================后端实现==================================
    整体思路：
        1.获取参数（用户名，密码）
        2.判断参数是否为空 （ResultInfo的封装类，用来封装响应结果，状态码，提示信息，返回的对象等等）
              如果为空
                 设置ResultInfo对象的状态码和提示信息
                 将ResultInfo对象设置request作用域中
                 请求转发跳转到登录页面
                 return
        3.调用service层的方法，通过用户名和密码查询用户对象
        4.判断用户对象是否为空
              如果为空
                 设置ResultInfo对象的状态码和提示信息
                 将ResultInfo对象设置request作用域中
                 请求转发跳转到登录页面
                 return
        5.如果用户对象不为空，将数据库中查询到的用户对象密码与前台传递的密码作比较 （将密码加密后再比较）
              如果密码不一致
                  设置ResultInfo对象的状态码和提示信息
                  将ResultInfo对象设置request作用域中
                  请求转发跳转到登录页面
                  return
        6.如果密码一致，将用户对象设置session作用域中
              判断用户是否选择记住密码
                  如果选择记住密码
                      创建Cookie对象，设置Cookie的名字和值，设置Cookie的有效期，设置Cookie的路径
                      将Cookie对象添加到response中
                  如果没有选择记住密码
                      清空原有的cookie对象
                  重定向跳转到首页

    分层思想：
        Web层：（控制层：接受参数、相应数据）
             1.获取参数（用户名，密码）
             2.调用Service层方法，返回ResultInfo对象
             3.判断是否登录成功
                  如果失败
                      将resultInfo对象设置request作用域中
                      请求转发跳转到登录页面
                  如果成功
                        判断用户是否选择记住密码
                            如果选择记住密码
                                创建Cookie对象，设置Cookie的名字和值，设置Cookie的有效期，设置Cookie的路径
                                将Cookie对象添加到response中
                            如果没有选择记住密码
                                清空原有的cookie对象
                            重定向跳转到首页

        Service层：（业务层：参数判断、处理业务逻辑）
                1.判断参数是否为空
                    如果为空
                         设置ResultInfo对象的状态码和提示信息
                         将ResultInfo对象返回
                    如果不为空
                2.调用Dao层方法，返回User对象
                3.判断User对象是否为空
                    如果为空
                         设置ResultInfo对象的状态码和提示信息
                         将ResultInfo对象返回
                    如果不为空
                4.判断密码是否一致，将数据库中查询到的用户对象的密码与前台传递的密码作比较 （将密码加密后再比较）
                    如果不一致
                         设置ResultInfo对象的状态码和提示信息
                         将ResultInfo对象返回
                    如果一致
                5.返回ResultInfo对象

        Dao层：（数据访问层：数据库中的增删改查操作）
                通过用户名查询用户对象，返回用户对象
                     1.获取数据库连接
                     2.定义sql语句
                     3.获取预编译对象
                     4.设置参数
                     5.执行sql语句
                     6.处理结果集
                     7.释放资源